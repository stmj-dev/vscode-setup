{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// * FUNCTION PHP =================================================================================================================
	"public function": {
		"prefix": "pubfunc",
		"body": [
			"/**",
			" * ${1:function_name} ",
			" * ",
			" * @param ${2:arguments}",
			" * @return mixed",
			" */",
			"public function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Public function"
	},
	"protected function": {
		"prefix": "protfunc",
		"body": [
			"/**",
			" * ${1:function_name} ",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"protected function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Protected function"
	},
	"private function": {
		"prefix": "protfunc",
		"body": [
			"/**",
			" * ${1:function_name} ",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"private function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Private function"
	},
	"__construct": {
		"prefix": "__const",
		"body": [
			"/**",
			" * initial",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"public function __construct(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Constructor function"
	},
	"__destruct": {
		"prefix": "__destruct",
		"body": [
			"/**",
			" * destructor",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"public function __destruct(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Destructor function"
	},
	"public function get ": {
		"prefix": "pubfuncget",
		"body": [
			"/**",
			" * get property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"public function get${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "public function getter"
	},
	"public function set ": {
		"prefix": "pubfuncset",
		"body": [
			"/**",
			" * set property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"public function set${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "public function setter"
	},
	"private function get ": {
		"prefix": "prifuncget",
		"body": [
			"/**",
			" * get property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"private function get${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Private function getter"
	},
	"private function set ": {
		"prefix": "prifuncset",
		"body": [
			"/**",
			" * set property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"private function set${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Private function setter"
	},
	"protected function get ": {
		"prefix": "profuncget",
		"body": [
			"/**",
			" * get property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"protected function get${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Protected function getter"
	},
	"protected function set ": {
		"prefix": "profuncset",
		"body": [
			"/**",
			" * set property ${1:property}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"protected function set${1:property}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Protected function setter"
	},
	"protected static function ": {
		"prefix": "profuncstatic",
		"body": [
			"/**",
			" * ${1:function_name}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"protected static function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Protected static function"
	},
	"public static function ": {
		"prefix": "pubfuncstatic",
		"body": [
			"/**",
			" * ${1:function_name}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"public static function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Public static function"
	},
	"private static function ": {
		"prefix": "prifuncstatic",
		"body": [
			"/**",
			" * ${1:function_name}",
			" * ",
			" * @param ${1:arguments}",
			" * @return ${2:arguments}",
			" */",
			"private static function ${1:function_name}(${2:arguments})",
			"{",
			"\t${3:// body}",
			"}"
		],
		"description": "Private static function"
	},
	"anonymous function": {
		"prefix": "anofunc",
		"body": ["function (${1:arguments}) {", "\t${2:// body}", "}"],
		"description": "anonymous function"
	},
	"arrow function": {
		"prefix": "infunc",
		"body": ["fn (${1:arguments}) => ${2:code}"],
		"description": "Arrow function"
	},
	// * / END FUNCTION PHP =================================================================================================================

	// * VARIABLE =================================================================================================================
	"variable string": {
		"prefix": "varstr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var string",
			" */",
			"$${1:variable_name} = \"${2:value}\";"
		],
		"description": "Variable string"
	},
	"variable int": {
		"prefix": "varint",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var int",
			" */",
			"$${1:variable_name} = ${2:value};"
		],
		"description": "Variable int"
	},
	"variable boolean": {
		"prefix": "varbool",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var boolean",
			" */",
			"$${1:variable_name} = ${2:true};"
		],
		"description": "Variable boolean"
	},
	"variable float": {
		"prefix": "varfloat",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var float",
			" */",
			"$${1:variable_name} = ${2:0.0};"
		],
		"description": "Variable float"
	},
	"variable array": {
		"prefix": "vararr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var array",
			" */",
			"$${1:variable_name} = [${2:values}];"
		],
		"description": "Variable array"
	},
	"variable object": {
		"prefix": "varobj",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var object",
			" */",
			"{1:variable_name} = {${2:values}};"
		],
		"description": "Variable array"
	},

	"public variable string": {
		"prefix": "pubvarstr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var string",
			" */",
			"public $${1:variable_name} = \"${2:value}\";"
		],
		"description": "Public variable string"
	},
	"public variable int": {
		"prefix": "pubvarint",
		"body": [
			"/**",
			" *",
			" * 1",
			" * @var int",
			" */",
			"public $${1:variable_name} = ${2:value};"
		],
		"description": "Public variable int"
	},
	"public variable boolean": {
		"prefix": "pubvarbool",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var boolean",
			" */",
			"public $${1:variable_name} = ${2:true};"
		],
		"description": "Public variable boolean"
	},
	"public variable float": {
		"prefix": "pubvarfloat",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var float",
			" */",
			"public $${1:variable_name} = ${2:0.0};"
		],
		"description": "Public variable float"
	},
	"public variable array": {
		"prefix": "pubvararr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var array",
			" */",
			"public $${1:variable_name} = [${2:values}];"
		],
		"description": "Public variable array"
	},
	"public variable object": {
		"prefix": "pubvarobj",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var object",
			" */",
			"public $${1:variable_name} = {${2:values}};"
		],
		"description": "Public variable array"
	},
	"private variable string": {
		"prefix": "privarstr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var string",
			" */",
			"private $${1:variable_name} = \"${2:value}\";"
		],
		"description": "private variable string"
	},
	"private variable int": {
		"prefix": "privarint",
		"body": [
			"/**",
			" *",
			" * $${",
			" * @var int",
			" */",
			"private $${1:variable_name} = ${2:value};"
		],
		"description": "private variable int"
	},
	"private variable boolean": {
		"prefix": "privarbool",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var boolean",
			" */",
			"private $${1:variable_name} = ${2:true};"
		],
		"description": "private variable boolean"
	},
	"private variable float": {
		"prefix": "privarfloat",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var float",
			" */",
			"private $${1:variable_name} = ${2:0.0};"
		],
		"description": "private variable float"
	},
	"private variable array": {
		"prefix": "privararr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var array",
			" */",
			"private $${1:variable_name} = [${2:values}];"
		],
		"description": "private variable array"
	},
	"private variable object": {
		"prefix": "privarobj",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var object",
			" */",
			"private $${1:variable_name} = {${2:values}};"
		],
		"description": "private variable array"
	},
	"protected variable string": {
		"prefix": "provarstr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = \"${2:value}\";"
		],
		"description": "Protected variable string"
	},
	"protected variable int": {
		"prefix": "provarint",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = ${2:value};"
		],
		"description": "Protected variable int"
	},
	"protected variable boolean": {
		"prefix": "provarbool",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = ${2:true};"
		],
		"description": "Protected variable boolean"
	},
	"protected variable float": {
		"prefix": "provarfloat",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = ${2:0.0};"
		],
		"description": "Protected variable float"
	},
	"protected variable array": {
		"prefix": "provararr",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = [${2:values}];"
		],
		"description": "Protected variable array"
	},
	"protected variable object": {
		"prefix": "provarobj",
		"body": [
			"/**",
			" *",
			" * variable_name",
			" * @var variable",
			" */",
			"protected $${1:variable_name} = {${2:values}};"
		],
		"description": "Protected variable array"
	},
	// * / VARIABLE =================================================================================================================

	// * LARAVEL =================================================================================================================
	// ! LARAVEL MODEL =================================================================================================================

	"The table associated with the model": {
		"prefix": "modeltablename",
		"body": [
			"/**",
			" * The table associated with the model.",
			" *",
			" * @var string",
			" */",
			"protected \\$table = \"${1:table_names}\";"
		],
		"description": "Function the table associated with the model"
	},

	"The primary key associated with the table.": {
		"prefix": "modelid",
		"body": [
			"/**",
			" * The primary key associated with the table.",
			" *",
			" * @var string",
			" */",
			"protected \\$primaryKey = \"${1:table_id}\";"
		],
		"description": "Function the primary key associated with the table."
	},
	"The model's default values for attributes.": {
		"prefix": "modelattr",
		"body": [
			"/**",
			" * The model's default values for attributes.",
			" *",
			" * @var array",
			" */",
			"protected \\$attributes = [$1];"
		],
		"description": "Function the model's default values for attributes."
	},
	"The attributes that are mass assignable.": {
		"prefix": "modelfillable",
		"body": [
			"/**",
			" * The attributes that are mass assignable.",
			" *",
			" * @var array",
			" */",
			"protected \\$fillable = [$1];"
		],
		"description": "Function the attributes that are mass assignable."
	},
	"The \"booted\" method of the model.": {
		"prefix": "modelboot",
		"body": [
			"/**",
			" * The \"booted\" method of the model.",
			" *",
			" * @return void",
			" */",
			"protected static function booted()",
			"{",
			"\t// code$1",
			"}"
		],
		"description": "Function the \"booted\" method of the model."
	},
	"Apply the scope to a given Eloquent query builder": {
		"prefix": "modelscope",
		"body": [
			"/**",
			" * Apply the scope to a given Eloquent query builder.",
			" *",
			" * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder",
			" * @param  \\Illuminate\\Database\\Eloquent\\Model  $model",
			" * @return void",
			" */",
			"public function apply(Builder $builder, Model $model)",
			"{",
			"\t\\$builder->where('${1:column_name}', '${2:condition}', '${3:value}');",
			"}"
		],
		"description": "Function Apply the scope to a given Eloquent query builder"
	},
	"Apply the scope to a given column Eloquent query builder": {
		"prefix": "modellocalscope",
		"body": [
			"/**",
			" * Scope a query to only include ${1:column_name} data.",
			" *",
			" * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query",
			" * @return \\Illuminate\\Database\\Eloquent\\Builder",
			" */",
			"public function scope${2:ColumnName}($query)",
			"{",
			"\treturn \\$query->where('${1:columnname}', '${3:condition}', '${4:value}');",
			"}"
		],
		"description": "Function Apply the scope to a given column Eloquent query builder"
	},
	"Scope a query to only include data of a given column.": {
		"prefix": "modeldinamicscope",
		"body": [
			"/**",
			" * Scope a query to only include data of a given ${1:column_name}.",
			" *",
			" * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query",
			" * @param  mixed  $${1:column_name}",
			" * @return \\Illuminate\\Database\\Eloquent\\Builder",
			"*/",
			"public function scopeOfType($query, $${1:column_name})",
			"{",
			"\treturn \\$query->where('${1:column_name}', $${1:column_name});",
			"}"
		],
		"description": "Scope a query to only include data of a given column"
	},
	"The event map for the model,": {
		"prefix": "modelevent",
		"body": [
			"/**",
			" * The event map for the model.",
			" *",
			" * @var array",
			" */",
			"protected \\$dispatchesEvents = [",
			"\t// events $0",
			"];"
		],
		"description": "The event map for the model,"
	},
	"Handle events after all transactions are committed.": {
		"prefix": "modelcomitted",
		"body": [
			"/**",
			" * Handle events after all transactions are committed.",
			" *",
			" * @var bool",
			" */",
			"public \\$afterCommit = ${1:true};"
		],
		"description": "Handle events after all transactions are committed."
	},
	"Get the given column associated with the this model.": {
		"prefix": "hasOne",
		"body": [
			"/**",
			" * Get the ${1:column_name} associated with the this model.",
			" */",
			"public function ${1:column_name}()",
			"{",
			"\treturn \\$this->hasOne(${2:ClassName}::class, '${3:foreign_key}', '${4:local_key}');",
			"}"
		],
		"description": "Get the given column associated with the this model."
	},
	"Get has many relations.": {
		"prefix": "hasMany",
		"body": [
			"/**",
			" * Get the ${1:column_name}s for the current model.",
			" */",
			"public function ${1:column_name}s()",
			"{",
			"\treturn \\$this->hasMany(${2:ClassName}::class, '${3:foreign_key}', '${4:local_key}');",
			"}"
		],
		"description": "Get the comments for the current model."
	},
	"Get the given column that owns the data.": {
		"prefix": "belongsTo",
		"body": [
			"/**",
			" * Get the ${1:column_name} that owns the data.",
			" */",
			"public function ${1:column_name}()",
			"{",
			"\treturn \\$this->belongsTo(${2:ClassName}::class, '${3:foreign_key}', '${4:owner_key}');",
			"}"
		],
		"description": "Get the given column owns the data."
	},
	"Get the given column associated with this model that own the data.": {
		"prefix": "hasoOneThrough",
		"body": [
			"/**",
			" * Get the ${1:column_name}'s ${2:TargetClass}.",
			" */",
			"public function ${1:column_name}${2:TargetClass}()",
			"{",
			"\treturn \\$this->hasOneThrough(${2:TargetClass}::class, ${3:TargetSecondClass}::class, '${4:first_id}', '${5:second_id}', '${6:id}', '${7:id}');$0",
			"}"
		],
		"description": "Get the given column associated with this model that own the data."
	},
	"Relationship provides a convenient way to access distant relations via an intermediate relation.": {
		"prefix": "hasManyThrough",
		"body": [
			"/**",
			" * Get all of the ${1:column_name}s for the current model.",
			" */",
			"public function ${1:column_name}s()",
			"{",
			"\treturn \\$this->hasManyThrough(${2:ClassName}::class, ${3:ClassName}::class, '${4:first_id}', '${5:second_id}', '${6:id}', , '${7:id}');",
			"}"
		],
		"description": "Relationship provides a convenient way to access distant relations via an intermediate relation."
	},
	"get the given column name has many relation": {
		"prefix": "belongsToMany",
		"body": [
			"/**",
			" * The ${1:column_name}s that belong to the current model.",
			" */",
			"public function ${1:column_name}s()",
			"{",
			"\treturn \\$this->belongsToMany(${2:ClassName::class);",
			"}"
		],
		"description": "get the given column name has many relation."
	},
	"Relations with default value as array.": {
		"prefix": "withdefaultarr",
		"body": [
			"->withDefault([",
			"\t'${1:column_name}' => \"${4:${3:column_name} does't exist.}\",",
			"]);"
		],
		"description": "Relations with default value as array."
	},
	"Relations with default value as function.": {
		"prefix": "withdefaultfunc",
		"body": [
			"->withDefault(function ($${1:target}, $${2:current}) {",
			"\t$${1:target}->${3:column_name} = \"${4:${3:column_name} does't exist.}\";",
			"});"
		],
		"description": "Relations with default value as function."
	},
	"Relations with default value as arrow function.": {
		"prefix": "withdefaultarrfunc",
		"body": [
			"->withDefault(fn ($${1:target}, $${2:current}) => $${1:target}->${3:column_name} = \"${4:${3:column_name} does't exist.}\" );"
		],
		"description": "Relations with default value as arrow function."
	},
	"Relations latest of many.": {
		"prefix": "lastofmany",
		"body": ["->latestOfMany();"],
		"description": "Relations latest of many."
	},
	"Relations oldest of many.": {
		"prefix": "oldofmany",
		"body": ["->oldestOfMany();"],
		"description": "Relations oldest of many."
	},
	"with pivot.": {
		"prefix": "withpivot",
		"body": ["->withPivot('${1:column_name}');"],
		"description": "with pivot."
	},
	"with timestamp.": {
		"prefix": "withtimestamp",
		"body": ["->withTimestamps();"],
		"description": "with timestamp."
	}

	// ! /LARAVEL MODEL =================================================================================================================
	// * / LARAVEL =================================================================================================================
}
